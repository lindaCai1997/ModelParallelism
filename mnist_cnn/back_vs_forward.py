'''
	This script reads runtime stats from "timeline_step_50.json" generated by mnist_cnn.py
	and compares the back propagation time with forward passing time. The ApplyGradients is
	ignored. It's pretty manual since we are just examine this file to get some evidence.
'''
import json
from matplotlib import pyplot as plt
import numpy as np

def main():
	with open ('timeline_step_50.json', 'r') as f:
		raw_data = json.load(f)
		data = raw_data['traceEvents']
		size = len(data)
		data_f = []
		data_b = []
		
		#drop small nodes and adam nodes
		for i in range(size):
			if 'ts' in data[i] and i != (size - 1) and 'adam_optimizer/Adam' not in data[i]['args']['name']:
				duration = data[i + 1]['ts'] - data[i]['ts']
				if duration >= 10:
					data[i]['ts'] = float(duration)
					
					if 'adam_optimizer/gradients' in data[i]['args']['name']:
						data_b.append(data[i])
					else:
						data_f.append(data[i])
		
		#get time duration
		forward = {}
		back = {}
		for i in range(len(data_f)):
			name = data_f[i]['args']['name']
			_sum = 0
			for j in range(len(data_b)):	
				if name in data_b[j]['args']['name']:
					_sum += data_b[j]['ts']		
			if _sum != 0:
				forward[name] = data_f[i]['ts']
				back[name] = _sum
		
		#visualization
		ratio = []
		name = []
		for key in back:
			ratio.append(back[key] / forward[key])
			name.append(key)
		plt.title('Computation Time Ratio (back / forward)')
		plt.ylabel('ratio')
		plt.xticks(np.arange(len(name)), name)
		plt.yticks(np.arange(0, 8.5, 0.5))
		plt.bar(np.arange(len(name)), ratio)
		plt.savefig("ratio.png")
		
			
if __name__ == '__main__':
	main()
